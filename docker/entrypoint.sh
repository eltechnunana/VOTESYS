#!/bin/bash
set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Starting VOTESYS Docker Container...${NC}"

# Function to wait for MySQL to be ready
wait_for_mysql() {
    echo -e "${YELLOW}Waiting for MySQL to be ready...${NC}"
    
    until mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASS" -e "SELECT 1" >/dev/null 2>&1; do
        echo -e "${YELLOW}MySQL is unavailable - sleeping${NC}"
        sleep 2
    done
    
    echo -e "${GREEN}MySQL is ready!${NC}"
}

# Function to create database configuration
create_db_config() {
    echo -e "${BLUE}Creating database configuration...${NC}"
    
    # Create config directory if it doesn't exist
    mkdir -p /var/www/html/config
    
    # Create database configuration file
    cat > /var/www/html/config/database.php << EOF
<?php
/**
 * Database Configuration
 * Auto-generated by Docker entrypoint
 */

// Prevent direct access
if (!defined('SECURE_ACCESS')) {
    define('SECURE_ACCESS', true);
}

// Database configuration
define('DB_HOST', '${DB_HOST:-db}');
define('DB_NAME', '${DB_NAME:-votesys}');
define('DB_USER', '${DB_USER:-votesys_user}');
define('DB_PASS', '${DB_PASS:-votesys_password}');
define('DB_CHARSET', '${DB_CHARSET:-utf8mb4}');

// Application configuration
define('APP_ENV', '${APP_ENV:-production}');
define('APP_DEBUG', ${APP_DEBUG:-false});
define('SECURE_ACCESS', true);

// Session configuration
define('SESSION_TIMEOUT', ${SESSION_TIMEOUT:-7200});

// File upload configuration
define('MAX_FILE_SIZE', ${MAX_FILE_SIZE:-5242880});
define('UPLOAD_PATH', '${UPLOAD_PATH:-uploads/}');

// Security configuration
define('CSRF_TOKEN_EXPIRE', ${CSRF_TOKEN_EXPIRE:-3600});
define('MAX_LOGIN_ATTEMPTS', ${MAX_LOGIN_ATTEMPTS:-5});
define('LOGIN_LOCKOUT_TIME', ${LOGIN_LOCKOUT_TIME:-900});

?>
EOF

    echo -e "${GREEN}Database configuration created!${NC}"
}

# Function to create constants configuration
create_constants_config() {
    echo -e "${BLUE}Creating constants configuration...${NC}"
    
    cat > /var/www/html/config/constants.php << EOF
<?php
/**
 * Heritage Christian University Online Voting System
 * System Constants Configuration
 * Auto-generated by Docker entrypoint
 */

// Prevent direct access
if (!defined('SECURE_ACCESS')) {
    define('SECURE_ACCESS', true);
}

// Session timeout settings (in seconds)
define('VOTER_SESSION_TIMEOUT', ${VOTER_SESSION_TIMEOUT:-3600});      // 1 hour
define('ADMIN_SESSION_TIMEOUT', ${ADMIN_SESSION_TIMEOUT:-7200});      // 2 hours

// Encryption settings
define('ENCRYPTION_KEY', '${ENCRYPTION_KEY:-HCU_VOTING_2024_SECURE_KEY_CHANGE_IN_PRODUCTION}');

// Security settings
define('VALIDATE_SESSION_IP', ${VALIDATE_SESSION_IP:-false});       // Set to true for stricter security
define('MAX_LOGIN_ATTEMPTS', ${MAX_LOGIN_ATTEMPTS:-5});            // Maximum login attempts
define('RATE_LIMIT_WINDOW', ${RATE_LIMIT_WINDOW:-900});           // Rate limit window in seconds (15 minutes)

// Development settings
define('DEVELOPMENT_MODE', ${DEVELOPMENT_MODE:-false});           // Set to false in production

// Database settings (fallback if not in database.php)
if (!defined('DB_HOST')) {
    define('DB_HOST', '${DB_HOST:-localhost}');
    define('DB_NAME', '${DB_NAME:-voting_system}');
    define('DB_USER', '${DB_USER:-root}');
    define('DB_PASS', '${DB_PASS:-}');
    define('DB_CHARSET', 'utf8mb4');
}

// Election settings
define('CURRENT_ELECTION_ID', ${CURRENT_ELECTION_ID:-1});          // Active election ID
define('TIMEZONE', '${TIMEZONE:-UTC}');

// Voting settings
define('VOTE_HASH_ALGORITHM', '${VOTE_HASH_ALGORITHM:-sha256}');

// File upload settings
define('MAX_FILE_SIZE', ${MAX_FILE_SIZE:-5242880});           // 5MB in bytes
define('ALLOWED_IMAGE_TYPES', '${ALLOWED_IMAGE_TYPES:-jpg,jpeg,png,gif}');

// Set timezone
date_default_timezone_set(TIMEZONE);

?>
EOF

    echo -e "${GREEN}Constants configuration created!${NC}"
}

# Function to set proper permissions
set_permissions() {
    echo -e "${BLUE}Setting file permissions...${NC}"
    
    # Set ownership
    chown -R www-data:www-data /var/www/html
    
    # Set directory permissions
    find /var/www/html -type d -exec chmod 755 {} \;
    
    # Set file permissions
    find /var/www/html -type f -exec chmod 644 {} \;
    
    # Set special permissions for uploads and logs
    chmod -R 775 /var/www/html/uploads
    chmod -R 775 /var/www/html/logs
    
    # Secure config directory
    chmod 750 /var/www/html/config
    chmod 640 /var/www/html/config/*
    
    echo -e "${GREEN}Permissions set successfully!${NC}"
}

# Function to initialize application
init_application() {
    echo -e "${BLUE}Initializing VOTESYS application...${NC}"
    
    # Create necessary directories
    mkdir -p /var/www/html/uploads/candidates
    mkdir -p /var/www/html/logs
    
    # Create .htaccess for uploads directory
    cat > /var/www/html/uploads/.htaccess << 'EOF'
# Deny access to all files in uploads directory
<Files "*">
    Order Deny,Allow
    Deny from all
</Files>

# Allow access to image files only
<FilesMatch "\.(jpg|jpeg|png|gif|webp)$">
    Order Allow,Deny
    Allow from all
</FilesMatch>
EOF

    # Create .htaccess for logs directory
    cat > /var/www/html/logs/.htaccess << 'EOF'
# Deny access to all files in logs directory
Order Deny,Allow
Deny from all
EOF

    echo -e "${GREEN}Application initialized!${NC}"
}

# Function to check database connection
check_database() {
    echo -e "${BLUE}Checking database connection...${NC}"
    
    php -r "
    try {
        \$pdo = new PDO('mysql:host=${DB_HOST};dbname=${DB_NAME};charset=${DB_CHARSET}', '${DB_USER}', '${DB_PASS}');
        \$pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        echo 'Database connection successful!\n';
    } catch (PDOException \$e) {
        echo 'Database connection failed: ' . \$e->getMessage() . '\n';
        exit(1);
    }
    "
    
    echo -e "${GREEN}Database connection verified!${NC}"
}

# Main execution
echo -e "${BLUE}=== VOTESYS Container Initialization ===${NC}"

# Wait for MySQL
if [ "$DB_HOST" != "localhost" ] && [ "$DB_HOST" != "127.0.0.1" ]; then
    wait_for_mysql
fi

# Create configuration
create_db_config
create_constants_config

# Initialize application
init_application

# Set permissions
set_permissions

# Check database connection
check_database

echo -e "${GREEN}=== VOTESYS Container Ready! ===${NC}"
echo -e "${BLUE}Web Application: http://localhost:8080${NC}"
echo -e "${BLUE}phpMyAdmin: http://localhost:8081${NC}"
echo -e "${BLUE}Admin Panel: http://localhost:8080/admin${NC}"
echo -e "${BLUE}Voter Portal: http://localhost:8080/voter${NC}"

# Execute the main command
exec "$@"